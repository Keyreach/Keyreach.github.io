<!doctype html>
<html>
<head>
<title>KUBATEST</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta charset='utf-8'>
<style>
body {
	background: #080808;
	color: #CCC;
	text-align: center;
	font: 400 24pt keyrus, monospace;
}
#mobilecontrols {
	box-sizing: border-box;
	position: fixed;
	bottom: 0;
	left: 0;
	right: 0;
	text-align: center;
	zIndex: 1;
	padding-bottom: 8px;
}
#mobilecontrols button {
	background: #FFF;
	color: #000;
	border: 0;
	width: 25%;
	height: 3em;
}

</style>
</head>
<body>

<p>PiXELMAИ ADVEИTUЯES // <span id='scorer'>0</span> // LiFES: <span id='life'>3</span></p>
<div id='mobilecontrols'>
<button onclick='mov = 1; setTimeout("if(mov == 1){ mov=0; }",900);'>&larr;</button>
<button onclick='if(!chkPos(2)){ jmp = 1; setTimeout("jmp=0",900); }'>JUMP</button>
<button onclick='mov = 2; setTimeout("if(mov == 2){ mov=0; }",900);'>&rarr;</button>
</div>
<canvas height='480' width='640' id='kanwas'>
</canvas>

</body>
<script>
var ex = [];
var ey = [];
var life = 3;
var botx = [];
var boty = [];
var botc = [];
var bott = [];
var score = 0;
var coin = 1;
var mov = 0;
var jmp = 0;
var x = y = 3;
var w = 640;
var h = 480;
var b = 8;
var kanwas = document.getElementById('kanwas');
var ktx = kanwas.getContext('2d');
ktx.fillRect(0,0,kanwas.width,kanwas.height);
var brickimg = new Image();
brickimg.src = 'brick.png';
var boneimg = new Image();
boneimg.src = 'bones.png';
var skreen = new Array();
for(i=0;i<(w/b);i++){
	skreen[i] = new Array();
	for(j=0;j<(h/b);j++){
		skreen[i][j] = 0;
	}
}
skreen[x][y] = 2;
function drawSkreen(){
	ktx.fillStyle = '#000';
	ktx.fillRect(0,0,kanwas.width,kanwas.height);
	for(i=0;i<(w/b);i++){
		for(j=0;j<(h/b);j++){
			if(skreen[i][j] == 1){
				ktx.fillStyle = "#159";
				ktx.fillRect(i*b,j*b,b,b);
				/* ktx.drawImage(brickimg,i*b,j*b); */
			} else if(skreen[i][j] == 2){
				ktx.fillStyle = "#FFF";
				ktx.fillRect(i*b,j*b,b,b);
			} else if(skreen[i][j] == 3){
				ktx.fillStyle = "#991";
				ktx.fillRect(i*b,j*b,b,b);
			} else if(skreen[i][j] == 9){
				ktx.fillStyle = "#911";
				ktx.fillRect(i*b,j*b,b,b);
				/* ktx.drawImage(boneimg,i*b,j*b); */
			}
		}
	}	
}
function explodeIt(ox,oy){
	ktx.fillStyle = '#F80';
	ktx.fillRect((ox-4)*b,(oy-4)*b,b*9,b*9);
	for(r=ox-5;r<ox+5;r++){
		for(s=oy-5;s<oy+5;s++){
			skreen[r][s] = 0;
			for(p=0;p<botx.length;p++){
				if((r==botx[p])&&(s==boty[p])){
					botx.splice(p,1);
					boty.splice(p,1);
					botc.splice(p,1);
					bott.splice(p,1);
				}
			}
			if((r==x)&&(s==y)){
				life --;
				document.getElementById('life').innerHTML = life;
			}
		}
	}
}
function moveNpc(){
	for(p=0;p<botx.length;p++){
		if((x==botx[p])&&(y==boty[p])){
			life --;
			document.getElementById('life').innerHTML = life;
			score = 0;
			document.getElementById('scorer').innerHTML = score;
			botx.splice(p,1);
			boty.splice(p,1);
			botc.splice(p,1);
			bott.splice(p,1);
		}
		if(skreen[botx[p]][boty[p]+1]==1){
			if((Math.abs(boty[p] - y) <= 4)&&(Math.abs(botx[p] - x) <= 16)&&(bott[p]==0)){
				if(botc[p]==1){
					skreen[botx[p]][boty[p]] = 3;
				} else {
					skreen[botx[p]][boty[p]] = 0;
				}
				botc[p] = 0;
				d = (x >= botx[p] ? 1 : -1);
				botx[p] += d;
				if(skreen[botx[p]][boty[p]]==3){
					botc[p] = 1;
				}
			}
			if((Math.abs(boty[p] - y) <= 5)&&(Math.abs(botx[p] - x) <= 5)&&(bott[p]==1)){
				setTimeout('explodeIt('+botx[p]+','+boty[p]+')',1000);
				botx.splice(p,1);
				boty.splice(p,1);
				botc.splice(p,1);
				bott.splice(p,1);
				p--;
			}
		} else {
			if(botc[p]==1){
				skreen[botx[p]][boty[p]] = 3;
			} else {
				skreen[botx[p]][boty[p]] = 0;
			}
			botc[p] = 0;
			boty[p]++;
			if(skreen[botx[p]][boty[p]]==3){
					botc[p] = 1;
			}
		}
	}
	for(p=0;p<botx.length;p++){
		skreen[botx[p]][boty[p]] = 9;
	}
	drawSkreen();
}
function movePc(dir){
	if(chkPos(dir)){
		skreen[x][y] = 0;
		switch(dir){
			case 6: x++; break;
			case 2: y++; break;
			case 4: x--; break;
			case 8: y--; break;
			case 3: x++; y++; break;
			case 1: x--; y++; break;
			case 7: x--; y--; break;
			case 9: x++; y--; break;
		}
		if(skreen[x][y]==3){
			score += coin;
			document.getElementById('scorer').innerHTML = score;
		}
		if(skreen[x][y]==9){
			life --;
			document.getElementById('life').innerHTML = life;
			for(p=0;p<botx.length;p++){
				if((x==botx[p])&&(y==boty[p])){
					botx.splice(p,1);
					boty.splice(p,1);
					botc.splice(p,1);
					bott.splice(p,1);
				}
			}
			score = 0;
			document.getElementById('scorer').innerHTML = score;
		}
		skreen[x][y] = 2;
		drawSkreen();
	}
}
function chkPos(dir){
	switch(dir){
		case 6: if((skreen[x+1][y]==1)||(x+1>(w/b))) return 0; break;
		case 2: if((skreen[x][y+1]==1)||(y+1>(h/b))) return 0; break;
		case 4: if((skreen[x-1][y]==1)||(x-1<0)) return 0; break;
		case 8: if((skreen[x][y-1]==1)||(y-1<0)) return 0; break;
	}
	return 1;
}
function drawRundumLine(){
	lien = Math.floor(Math.random()*(h/b/4))*4-1;
	a = Math.floor(Math.random()*(w/b))
	l = Math.floor(Math.random()*((w/b)-a));
	for(i=0;i<l;i++){
		skreen[a+i][lien] = 1;
	}
}
for(i=0;i<(w/b);i++){
	skreen[i][(h/b)-1] = 1;
}
for(k=0;k<35;k++)
	drawRundumLine();
for(i=0;i<(w/b);i++){
	for(j=0;j<(h/b);j++){
		if((skreen[i][j] == 1)&&(Math.random()<0.2)){
			skreen[i][j-1] = 3;
		}
	}
}
for(i=0;i<(w/b);i++){
	for(j=0;j<(h/b);j++){
		if((skreen[i][j] == 1)&&(Math.random()<0.03)){
			skreen[i][j-1] = 9;
			botx.push(i);
			boty.push(j-1);
			botc.push(0);
			bott.push((Math.random()<0.7 ? 0 : 1));
		}
	}
}
drawSkreen();
window.onkeydown = function(event){
	switch(event.keyCode){
		case 37: mov = 1; break;
		case 65: if(!chkPos(2)){ jmp = 1; setTimeout('jmp=0',900); } break;
		case 39: mov = 2; break;
		case 40: movePc(2); break;
	}
}
window.onkeyup = function(event){
	switch(event.keyCode){
		case 37: mov = 0; break;
		case 39: mov = 0; break;
	}	
}
setInterval('if(mov==1) movePc(4)',100);
setInterval('if(mov==2) movePc(6)',100);
setInterval('if(jmp==1) movePc(8)',100);
setInterval('if(jmp==0) movePc(2)',100);
setInterval('explodeIt()',1000);
setInterval('moveNpc()',200);
</script>
</html>
